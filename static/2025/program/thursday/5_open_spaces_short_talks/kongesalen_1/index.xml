<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kongesalen 1 on Booster Conference 2025 Bergen</title>
    <link>https://www.boosterconf.no/2025/program/thursday/5_open_spaces_short_talks/kongesalen_1/</link>
    <description>Recent content in Kongesalen 1 on Booster Conference 2025 Bergen</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://www.boosterconf.no/2025/program/thursday/5_open_spaces_short_talks/kongesalen_1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Electrifying Norway with F# and DDD</title>
      <link>https://www.boosterconf.no/2025/program/thursday/5_open_spaces_short_talks/kongesalen_1/electrifying-norway-with-f-and-ddd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.boosterconf.no/2025/program/thursday/5_open_spaces_short_talks/kongesalen_1/electrifying-norway-with-f-and-ddd/</guid>
      <description>&lt;p&gt;Imagine inheriting a large C# legacy codebase for electrical transmission line modeling software. It desperately needs love. Where do you start? What would happen if you rewrote its core parts to F# with Domain-Driven Design in mind?&lt;/p&gt;&#xA;&lt;p&gt;It turns out that Units of Measure, Expressions-only syntax, Immutability, and Exhaustive Pattern Matching are incredibly useful features of F#. Combined with Domain-Driven Design (DDD), strongly typing your domain with Algebraic Data Types in F# has never been easier.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hvordan sensorteknologi og brukersentrert utvikling kan gi verdi for sykehusets operasjonsavdeling</title>
      <link>https://www.boosterconf.no/2025/program/thursday/5_open_spaces_short_talks/kongesalen_1/hvordan-sensorteknologi-og-brukersentrert-utvikling-kan-gi-verdi-for-sykehusets-operasjonsavdeling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.boosterconf.no/2025/program/thursday/5_open_spaces_short_talks/kongesalen_1/hvordan-sensorteknologi-og-brukersentrert-utvikling-kan-gi-verdi-for-sykehusets-operasjonsavdeling/</guid>
      <description>&lt;p&gt;Når man skal gjennomføre en operasjon på sykehuset, er det selvsagt viktig at utstyret som trengs under operasjonen er tilgjengelig og klart til bruk. Men har du noen gang tenkt på logistikken som ligger bak det å ha rett utstyr, til rett tid og på rett operasjonssal? Flere av sykehusene i Helse Vest har nylig fått eller får snart nye operasjonsavdelinger. I denne presentasjonen vil jeg fortelle om hvordan Seksjon for Utvikling hos Helse Vest IKT, ved å benytte smidig utvikling og tett brukermedvirkning, har utviklet en løsning som integrerer data fra fagsystemer og posisjonssensorer på operasjonsutstyret, og sammenstiller dette på en måte som gir økt effektivitet og trygghet i sterilforsyningskjeden. I en bransje som preges av store prosjekter, tunge prosesser og lange beslutningsveier, har vi vist at intern egenutvikling med en smidig metodikk og hyppige produksjonssettinger gir stor verdi for de sykehusansatte, og at mulighet for justeringer i løsningen, når det viser seg at arbeidsprosessene ble litt annerledes enn hva man hadde planlagt på forhånd, er essensielt for en god brukeropplevelse og  øker effektiviteten og tryggheten i en svært presset arbeidshverdag.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unraveling Chaos: Streamlining Business Rules with Kotlin Multiplatform at Posten Bring</title>
      <link>https://www.boosterconf.no/2025/program/thursday/5_open_spaces_short_talks/kongesalen_1/unraveling-chaos-streamlining-business-rules-with-kotlin-multiplatform-at-posten-bring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.boosterconf.no/2025/program/thursday/5_open_spaces_short_talks/kongesalen_1/unraveling-chaos-streamlining-business-rules-with-kotlin-multiplatform-at-posten-bring/</guid>
      <description>&lt;p&gt;Do you have a complex business rule-set problem? You know the kind where you have business rules (logic) spread across multiple platforms, systems and applications? Some of them might even be alter egos of the same rule hiding in different apps. You never know which one might turn up where, there is no single source of truth, solving errors takes hours of debugging, and making changes requires (oftentimes) painful coordination across teams and applications (ugh).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
